// –¶–≤–µ—Ç–æ—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî Telegram Mini App

// --- Telegram WebApp API (–º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –±–µ–∑ Telegram) ---
let tg = window.Telegram && window.Telegram.WebApp ? window.Telegram.WebApp : { close: () => {} };

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
let currentDate = new Date();
let selectedDate = null;
let savedDates = [];
let userVariables = {};
let lastSavedYear = null;

// --- –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –†–§ (2025) ---
const holidays2025 = [
    '2025-01-01','2025-01-02','2025-01-03','2025-01-04','2025-01-05','2025-01-06','2025-01-07','2025-01-08',
    '2025-02-23','2025-03-08','2025-05-01','2025-05-09','2025-06-12','2025-11-04'
];

// --- DOM —ç–ª–µ–º–µ–Ω—Ç—ã ---
const elements = {
    currentMonth: document.getElementById('currentMonth'),
    calendarDays: document.getElementById('calendarDays'),
    prevMonth: document.getElementById('prevMonth'),
    nextMonth: document.getElementById('nextMonth'),
    eventModal: document.getElementById('eventModal'),
    notificationModal: document.getElementById('notificationModal'),
    selectedDateText: document.getElementById('selectedDateText'),
    eventName: document.getElementById('eventName'),
    datesList: document.getElementById('datesList'),
    saveBtn: document.getElementById('saveBtn'),
    statusInfo: document.getElementById('statusInfo'),
    savedDates: document.getElementById('savedDatesSection')
};

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ clientId –∏–∑ URL (–∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç –¥–ª—è —Ç–µ—Å—Ç–∞) ---
function getClientId() {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get('id') || '546082827';
}

// --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async function loadUserVariables() {
    try {
        const clientId = getClientId();
        const response = await fetch(`https://chatter.salebot.pro/api/da37e22b33eb13cc4cabaa04dfe21df9/get_variables?client_id=${clientId}`);
        if (!response.ok) {
            userVariables = {};
            savedDates = [];
            lastSavedYear = null;
            return;
        }
        const data = await response.json();
        userVariables = data.variables || {};
        savedDates = [];
        for (let i = 1; i <= 3; i++) {
            const key = `sobitie_${i}`;
            if (userVariables[key]) {
                try {
                    const parsed = JSON.parse(userVariables[key]);
                    savedDates.push({ date: parsed.date, name: parsed.name, index: i });
                } catch (err) {
                    console.warn(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${key}`, err);
                }
            }
        }
        lastSavedYear = userVariables.last_saved_year ? parseInt(userVariables.last_saved_year) : null;
    } catch (err) {
        userVariables = {};
        savedDates = [];
        lastSavedYear = null;
    }
}

// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç ---
function canModifyDates() {
    const currentYear = new Date().getFullYear();
    if (!lastSavedYear) return true;
    return currentYear > lastSavedYear;
}

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ ---
function updateStatusInfo() {
    const currentYear = new Date().getFullYear();
    const canModify = canModifyDates();
    if (!canModify) {
        elements.statusInfo.innerHTML = `<strong>–í–Ω–∏–º–∞–Ω–∏–µ!</strong> –î–∞—Ç—ã –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –≥–æ–¥. –°–ª–µ–¥—É—é—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ –≤ ${currentYear + 1} –≥–æ–¥—É.`;
        elements.statusInfo.style.background = "#ffeaea";
        elements.statusInfo.style.color = "#b71c1c";
    } else if (savedDates.length >= 3) {
        elements.statusInfo.innerHTML = `<strong>–ú–∞–∫—Å–∏–º—É–º –¥–∞—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!</strong> –£ –≤–∞—Å —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ 3 –ø–∞–º—è—Ç–Ω—ã–µ –¥–∞—Ç—ã.`;
        elements.statusInfo.style.background = "#fff3cd";
        elements.statusInfo.style.color = "#856404";
    } else if (savedDates.length === 0) {
        elements.statusInfo.innerHTML = `–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 3 –ø–∞–º—è—Ç–Ω—ã—Ö –¥–∞—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ü–≤–µ—Ç–æ—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üå∏`;
        elements.statusInfo.style.background = "#e1bee7";
        elements.statusInfo.style.color = "#4a148c";
    } else {
        elements.statusInfo.innerHTML = `–í—ã–±—Ä–∞–Ω–æ –¥–∞—Ç: ${savedDates.length}/3. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –¥–∞—Ç—ã.`;
        elements.statusInfo.style.background = "#e1bee7";
        elements.statusInfo.style.color = "#4a148c";
    }
}

// --- –†–µ–Ω–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è ---
function renderCalendar() {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const monthNames = ['–Ø–Ω–≤–∞—Ä—å','–§–µ–≤—Ä–∞–ª—å','–ú–∞—Ä—Ç','–ê–ø—Ä–µ–ª—å','–ú–∞–π','–ò—é–Ω—å','–ò—é–ª—å','–ê–≤–≥—É—Å—Ç','–°–µ–Ω—Ç—è–±—Ä—å','–û–∫—Ç—è–±—Ä—å','–ù–æ—è–±—Ä—å','–î–µ–∫–∞–±—Ä—å'];
    elements.currentMonth.textContent = `${monthNames[month]} ${year}`;
    elements.calendarDays.innerHTML = '';
    const firstDay = new Date(year, month, 1);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - (firstDay.getDay() === 0 ? 6 : firstDay.getDay() - 1));
    for (let i = 0; i < 42; i++) {
        const date = new Date(startDate);
        date.setDate(startDate.getDate() + i);
        const dayElement = document.createElement('div');
        dayElement.className = 'calendar-day';
        dayElement.textContent = date.getDate();
        if (date.getMonth() !== month) {
            dayElement.classList.add('other-month');
        } else {
            const dateString = date.toISOString().split('T')[0];
            if (holidays2025.includes(dateString)) {
                dayElement.classList.add('holiday');
            } else {
                const isSaved = savedDates.some(saved => saved.date === dateString);
                if (isSaved) {
                    dayElement.classList.add('saved');
                } else if (!canSelectDate(date)) {
                    dayElement.classList.add('disabled');
                } else {
                    dayElement.addEventListener('click', () => selectDate(date));
                }
            }
        }
        elements.calendarDays.appendChild(dayElement);
    }
}

// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã ---
function canSelectDate(date) {
    const today = new Date();
    today.setHours(0,0,0,0);
    const currentYear = today.getFullYear();
    if (date.getFullYear() < currentYear) return false;
    if (date.getFullYear() === currentYear && date.getMonth() < today.getMonth()) return false;
    if (date.getFullYear() === currentYear && date.getMonth() === today.getMonth() && date.getDate() < today.getDate()) return false;
    const daysDiff = Math.ceil((date - today) / (1000 * 60 * 60 * 24));
    if (daysDiff < 15) return false;
    return true;
}

// --- –í—ã–±–æ—Ä –¥–∞—Ç—ã ---
function selectDate(date) {
    if (!canModifyDates()) return showNotification('–î–∞—Ç—ã –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –≥–æ–¥. –°–ª–µ–¥—É—é—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É.');
    if (savedDates.length >= 3) return showNotification('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –¥–∞—Ç (3). –£–¥–∞–ª–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞—Ç, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é.');
    const today = new Date();
    const daysDiff = Math.ceil((date - today) / (1000 * 60 * 60 * 24));
    if (daysDiff < 15) return showNotification('–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –¥–∞—Ç—ã, –¥–æ –∫–æ—Ç–æ—Ä—ã—Ö –º–µ–Ω—å—à–µ 15 –¥–Ω–µ–π.');
    selectedDate = date;
    elements.selectedDateText.textContent = date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' });
    elements.eventName.value = '';
    showPopup(elements.eventModal);
}

// --- Popup/Notification helpers ---
function showPopup(popup) {
    document.getElementById('modalOverlay').classList.add('show');
    popup.classList.add('show');
}
function hidePopup(popup) {
    document.getElementById('modalOverlay').classList.remove('show');
    popup.classList.remove('show');
}
function showNotification(message) {
    document.getElementById('notificationText').textContent = message;
    showPopup(elements.notificationModal);
}

// --- –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ ---
function addEvent() {
    const eventName = elements.eventName.value.trim();
    if (!eventName) return showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.');
    if (!selectedDate) return showNotification('–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.');
    const newIndex = savedDates.length + 1;
    savedDates.push({ date: selectedDate.toISOString().split('T')[0], name: eventName, index: newIndex });
    hidePopup(elements.eventModal);
    renderCalendar();
    renderSavedDates();
    updateStatusInfo();
    updateSaveButton();
}

// --- –£–¥–∞–ª–∏—Ç—å –¥–∞—Ç—É ---
function removeDate(index) {
    savedDates = savedDates.filter(date => date.index !== index);
    savedDates.forEach((date, i) => { date.index = i + 1; });
    renderCalendar();
    renderSavedDates();
    updateStatusInfo();
    updateSaveButton();
}

// --- –†–µ–Ω–¥–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞—Ç ---
function renderSavedDates() {
    if (savedDates.length === 0) {
        elements.savedDates.style.display = 'none';
        return;
    }
    elements.savedDates.style.display = 'block';
    elements.datesList.innerHTML = '';
    savedDates.forEach(date => {
        const dateElement = document.createElement('div');
        dateElement.className = 'date-item';
        const dateObj = new Date(date.date);
        const formattedDate = dateObj.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' });
        dateElement.innerHTML = `
            <div class="date-info">
                <div class="date-number">${formattedDate}</div>
                <div class="event-name">${date.name}</div>
            </div>
            <button class="remove-btn" onclick="removeDate(${date.index})">–£–¥–∞–ª–∏—Ç—å</button>
        `;
        elements.datesList.appendChild(dateElement);
    });
}

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ---
function updateSaveButton() {
    elements.saveBtn.disabled = !(savedDates.length > 0 && canModifyDates());
}

// --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç ---
async function saveDates() {
    try {
        const clientId = getClientId();
        if (!clientId) return showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        const currentYear = new Date().getFullYear();
        const data = {
            client_id: clientId,
            year: currentYear,
            last_saved_year: currentYear,
            sobitie_1: '', sobitie_2: '', sobitie_3: ''
        };
        savedDates.forEach((date, index) => {
            data[`sobitie_${index + 1}`] = JSON.stringify({ date: date.date, name: date.name });
        });
        elements.saveBtn.disabled = true;
        elements.saveBtn.querySelector('.btn-text').textContent = '–°–æ—Ö—Ä–∞–Ω—è–µ–º...';
        const response = await fetch('https://chatter.salebot.pro/api/318b69f1db777329490d1c7dba584c26/callback', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });
        elements.saveBtn.querySelector('.btn-text').textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞—Ç—ã';
        elements.saveBtn.disabled = false;
        if (!response.ok) {
            const errorText = await response.text();
            return showNotification(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${response.status} ${response.statusText}\n${errorText}`);
        }
        showNotification('–î–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
        setTimeout(() => { tg.close(); }, 2000);
    } catch (error) {
        elements.saveBtn.querySelector('.btn-text').textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞—Ç—ã';
        elements.saveBtn.disabled = false;
        showNotification(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error.message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`);
    }
}

// --- –°–æ–±—ã—Ç–∏—è ---
function setupEventListeners() {
    elements.prevMonth.addEventListener('click', () => { currentDate.setMonth(currentDate.getMonth() - 1); renderCalendar(); });
    elements.nextMonth.addEventListener('click', () => { currentDate.setMonth(currentDate.getMonth() + 1); renderCalendar(); });
    document.getElementById('closeEventModal').addEventListener('click', () => hidePopup(elements.eventModal));
    document.getElementById('cancelEvent').addEventListener('click', () => hidePopup(elements.eventModal));
    document.getElementById('addEvent').addEventListener('click', addEvent);
    document.getElementById('closeNotificationModal').addEventListener('click', () => hidePopup(elements.notificationModal));
    document.getElementById('okNotification').addEventListener('click', () => hidePopup(elements.notificationModal));
    elements.saveBtn.addEventListener('click', saveDates);
    elements.eventModal.addEventListener('click', (e) => { if (e.target === elements.eventModal) hidePopup(elements.eventModal); });
    elements.notificationModal.addEventListener('click', (e) => { if (e.target === elements.notificationModal) hidePopup(elements.notificationModal); });
    document.getElementById('modalOverlay').addEventListener('click', () => {
        hidePopup(elements.eventModal);
        hidePopup(elements.notificationModal);
    });
    elements.eventName.addEventListener('keypress', (e) => { if (e.key === 'Enter') addEvent(); });
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
async function initApp() {
    await loadUserVariables();
    renderCalendar();
    renderSavedDates();
    updateStatusInfo();
    updateSaveButton();
    setupEventListeners();
}
document.addEventListener('DOMContentLoaded', initApp);
